#+TITLE: Aner's Emacs Configuration
#+OPTIONS: H:10

* Base Configuration
** Package installation
Installation of all required packages.

Taken from: https://stackoverflow.com/questions/55038594/setting-up-emacs-on-new-machine-with-init-el-and-package-installation

Declare repositories:

#+begin_src emacs-lisp
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("melpa" . "http://melpa.org/packages/")))

#+end_src

Initialize package management and refresh repositories unless archived.

If repositories need to be refreshed, this command should be called.

#+begin_src emacs-lisp
(require 'package)
(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))
#+end_src

Defining a function to install a package unless already installed
#+begin_src emacs-lisp
(defun package-unless-install(pkg)
  (unless (package-installed-p pkg)
    (package-install pkg)))
#+end_src
* UI
** Clean UI
Disabling the toolbar, the splash-screen, the menu-bar and the scroll-bar
#+begin_src emacs-lisp
  (customize-set-variable 'inhibit-startup-screen t) ; no splash screen on start
  (tool-bar-mode -1)   ; no tool bar with icons
  (scroll-bar-mode -1) ; no scroll bars
  (menu-bar-mode -1)   ; no menu bar
#+end_src
** Text
*** Line numbering
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))
#+end_src

#+RESULTS:
: t

** Powerline
#+begin_src emacs-lisp
(package-unless-install 'powerline)
(require 'powerline)
(powerline-default-theme)
#+end_src
** Which-Key
#+begin_src emacs-lisp
(package-unless-install 'which-key)
(require 'which-key)
(which-key-mode)
#+end_src
** Keymaps
Window splitting:
#+begin_src emacs-lisp
(global-set-key (kbd "M-\\") 'split-window-horizontally) ;;Instead of delete-horizontal-space
(global-set-key (kbd "M-\-") 'split-window-vertically) ;;Instead of negative-argument
#+end_src

Window movement:
#+begin_src emacs-lisp
(global-set-key (kbd "M-h") 'windmove-left) ;;Instead of mark-paragraph
(global-set-key (kbd "M-l") 'windmove-right) ;;Instead of downcase-word
(global-set-key (kbd "M-k") 'windmove-up) ;;Instead of kill-sentence
(global-set-key (kbd "M-j") 'windmove-down) ;;Instead of indent-new-comment-line
(global-set-key (kbd "M-<left>") 'windmove-left) ;;Instead of mark-paragraph
(global-set-key (kbd "M-<right>") 'windmove-right) ;;Instead of downcase-word
(global-set-key (kbd "M-<up>") 'windmove-up) ;;Instead of kill-sentence
(global-set-key (kbd "M-<down>") 'windmove-down) ;;Instead of indent-new-comment-line
(global-unset-key (kbd "M-d")) ;;Instead of kill-word
(global-set-key (kbd "M-d M-d") 'delete-window) ;;Instead of indent-new-comment-line
(global-set-key (kbd "M-d D") 'kill-buffer-and-window) ;;Instead of indent-new-comment-line
#+end_src

Buffers:
#+begin_src emacs-lisp-f
(eval-after-load "evil-autoloads"
    '(define-key 'evil-normal-state-map (kbd "C-b") nil))
(eval-after-load "evil-autoloads"
    '(global-set-key (kbd "C-b C-b") 'buffer-menu))
(eval-after-load "evil-autoloads"
    '(global-set-key (kbd "C-b C-d") 'kill-buffer))

#+end_src

* Global modes
** EVIL mode
#+begin_src emacs-lisp
(package-unless-install 'evil)
(require 'evil )
(evil-mode 1)
#+end_src
** IVY
Enabling IVY. Taken from their website https://github.com/abo-abo/swiper

#+begin_src emacs-lisp
(package-unless-install 'ivy)
(package-unless-install 'ivy-hydra)
(package-unless-install 'ivy-hydra)
(require 'ivy)
(require 'ivy-hydra)
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(setq ivy-count-format "(%d/%d) ")
#+end_src

*** Keymaps
#+begin_src emacs-lisp
(define-key ivy-minibuffer-map (kbd "C-j") 'ivy-next-line)
(define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line)
#+end_src

** Projectile
Package installation
#+begin_src emacs-lisp
(package-unless-install 'projectile)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "M-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "M-p a") 'projectile-add-known-project)
#+end_src

Ivy for projectile:
#+begin_src emacs-lisp
(package-unless-install 'counsel-projectile)
(require 'counsel-projectile)
(counsel-projectile-mode +1)
#+end_src

*** Keymaps
#+begin_src projectile
(global-set-key (kbd "C-b") 'projectile-display-buffer)
#+end_src projectile
* Major modes
** Multi-Term
#+begin_src emacs-lisp
(package-unless-install 'multi-term)
(require 'multi-term)
#+end_src
** PDF-Tools
For viewing PDF files and such! YAY

#+begin_src emacs-lisp
(package-unless-install 'multi-term)
(require 'multi-term)
#+end_src
** ORG
*** Babel   
#+begin_src emacs-lisp
(require 'ob)
(require 'ob-tangle)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (emacs-lisp . t)
   (python . t)
   (org . t)
   (lilypond . t)
   (latex . t)
   (js . t)
   (java . t)
   (C . t)))

(add-to-list 'org-src-lang-modes (quote ("dot". graphviz-dot)))
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
(add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))

#+end_src
*** HTML Preview
#+begin_src emacs-lisp
(package-unless-install 'org-preview-html)
(package-unless-install 'htmlize)
(require 'org-preview-html)
(require 'htmlize)
#+end_src
*** PDF Preview
#+begin_src emacs-lisp
(package-unless-install 'latex-preview-pane)
#+end_src
