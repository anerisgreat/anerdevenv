#+TITLE: Aner's Emacs Configuration
#+OPTIONS: H:10

* Base Configuration
** Package installation
Installation of all required packages.

Taken from: https://stackoverflow.com/questions/55038594/setting-up-emacs-on-new-machine-with-init-el-and-package-installation 
Declare repositories:

#+begin_src emacs-lisp :results silent
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("melpa" . "http://melpa.org/packages/")))
#+end_src

Initialize package management and refresh repositories unless archived.

If repositories need to be refreshed, this command should be called.

#+begin_src emacs-lisp :results silent
(require 'package)
(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))
#+end_src

Defining a function to install a package unless already installed
#+begin_src emacs-lisp :results silent
(defun package-unless-install(pkg)
  (unless (package-installed-p pkg)
    (package-install pkg)))
#+end_src
** Backup files
Taken from here:
https://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files

#+begin_src emacs-lisp :results silent
  (setq backup-directory-alist `(("." . "~/.cache/emacs-backups/")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)
#+end_src
* UI
** Clean UI
Disabling the toolbar, the splash-screen, the menu-bar and the scroll-bar
#+begin_src emacs-lisp :results silent
(customize-set-variable 'inhibit-startup-screen t) ; no splash screen on start
(tool-bar-mode -1)   ; no tool bar with icons
(scroll-bar-mode -1) ; no scroll bars
(menu-bar-mode -1)   ; no menu bar
#+end_src
** Window dividers
Customizing space between windows
#+begin_src emacs-lisp :results silent
(window-divider-mode 0)
(set-face-foreground 'vertical-border "LightGray")
(set-face-background 'fringe "WhiteSmoke")
;For theme-independent configuration
;(set-face-foreground 'vertical-border (face-attribute 'mode-line :background))
;(set-face-background 'fringe (face-attribute 'mode-line-inactive :background))
#+end_src
** Text
*** Text format
Setting font size to 10. The value to place is font-size * 10

#+begin_src emacs-lisp :results silent
(set-face-attribute 'default nil :height 100)
#+end_src
*** Line numbering
#+begin_src emacs-lisp :results silent
(setq display-line-numbers-type 'relative)
(setq display-line-numbers-grow-only 1)
(setq display-line-numbers-width-start 1)
(when (version<= "26.0.50" emacs-version )
(global-display-line-numbers-mode))
#+end_src
*** Line highlight
#+begin_src emacs-lisp :results silent
(global-hl-line-mode)
#+end_src
*** Line wrap
 #+begin_src emacs-lisp :results silent
(global-visual-line-mode t)
 #+end_src
*** Parenthesis
Highlight matching parenthesis
 #+begin_src emacs-lisp :results silent
(show-paren-mode 1)
 #+end_src
*** Tabs
#+begin_src emacs-lisp :results silent
(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)
#+end_src
** Modeline
#+begin_src emacs-lisp :results silent
;(package-unless-install 'smart-mode-line)
;(setq sml/no-confirm-load-theme t)
;(sml/setup)
;(setq sml/theme 'light)
#+end_src
** Which-Key
#+begin_src emacs-lisp :results silent
(package-unless-install 'which-key)
(require 'which-key)
(which-key-mode)
#+end_src
** Perspective
#+begin_src emacs-lisp :results silent
(package-unless-install 'perspective)
(require 'perspective)
(persp-mode 1)
#+end_src
*** Keymaps
#+begin_src emacs-lisp :results silent
(eval-after-load "org"
    '(define-key org-mode-map (kbd "M-<tab>") nil)) ;;Unset org-mode map "org-force-cycle-archived"
(global-set-key (kbd "M-<tab>") 'persp-next)
(global-set-key (kbd "M-`") 'persp-prev)
(global-set-key (kbd "M-n") 'persp-switch)
#+end_src

** Active Window Background
#+begin_src emacs-lisp :results silent
(defun highlight-selected-window ()
    ;Walk through all buffers, set all other buffers to
    ;default background
    (walk-windows (lambda (w)
    (with-current-buffer (window-buffer w)
        (unless (eq w (selected-window))
        (progn
            (buffer-face-set 'default)
            ;(face-remap-remove-relative fringeface)
                )
        )
    )
    ))
    ;Finally, set current buffer background
    (buffer-face-set '(:background "PaleTurquoise1"))
    ;(if (active-minibuffer-window)
    (if (minibuffer-window-active-p (selected-window))
        (buffer-face-set '(:background "PaleTurquoise1"))
        (buffer-face-set '(:background "LightYellow"))
    )
)
(add-hook 'buffer-list-update-hook 'highlight-selected-window)
#+end_src
** Easy Prompt
#+begin_src emacs-lisp :results silent
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** General Keymaps
 Window splitting:
 #+begin_src emacs-lisp :results silent
;;Instead of delete-horizontal-space
(global-set-key (kbd "M-\\") 'split-window-horizontally)
;;Instead of negative-argument
(global-set-key (kbd "M-\-") 'split-window-vertically)
 #+end_src

 Window movement:
#+begin_src emacs-lisp :results silent
;;Unset the org-mode map of "org-mark-element"
(eval-after-load "org"
    '(define-key org-mode-map (kbd "M-h") nil)) 

;;Instead of mark-paragraph (and org mark element)
(global-set-key (kbd "M-h") 'windmove-left)

;;Instead of downcase-word
(global-set-key (kbd "M-l") 'windmove-right) 
;;Instead of kill-sentence
(global-set-key (kbd "M-k") 'windmove-up) 
;;Instead of indent-new-comment-line
(global-set-key (kbd "M-j") 'windmove-down)
;;Instead of mark-paragraph
(global-set-key (kbd "M-<left>") 'windmove-left)
;;Instead of downcase-word
(global-set-key (kbd "M-<rijjt>") 'windmove-right)
;;Instead of kill-sentence
(global-set-key (kbd "M-<up>") 'windmove-up)
;;Instead of indent-new-comment-line
(global-set-key (kbd "M-<down>") 'windmove-down)
(global-unset-key (kbd "M-d")) ;;Instead of kill-word
;;Instead of indent-new-comment-line
(global-set-key (kbd "M-d M-d") 'delete-window)
;;Instead of indent-new-comment-line
(global-set-key (kbd "M-d D") 'kill-buffer-and-window)
(defun set-window-width (n)
    (adjust-window-trailing-edge (selected-window) ( - n (window-width)) t))
(defun set-85-columns()
    (interactive)
    (set-window-width 85))
;;Instead of indent-new-comment-line
(global-set-key (kbd "M-d R") 'set-85-columns)
#+end_src

Buffers:
#+begin_src emacs-lisp :results silent
;(eval-after-load "evil-autoloads"
;    '(define-key evil-normal-state-map (kbd "C-b") nil))
;(eval-after-load "evil-autoloads"
;    '(global-set-key (kbd "C-b C-b") 'buffer-menu))
;(eval-after-load "evil-autoloads"
;    '(global-set-key (kbd "C-b C-d") 'kill-buffer))
#+end_src

* Global modes
** EVIL mode
#+begin_src emacs-lisp :results silent
(package-unless-install 'evil)
(require 'evil )
(evil-mode 1)
#+end_src
** IVY
Enabling IVY. Taken from their website https://github.com/abo-abo/swiper

#+begin_src emacs-lisp :results silent
(package-unless-install 'ivy)
(require 'ivy)
(package-unless-install 'ivy-hydra)
(require 'ivy-hydra)
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(setq ivy-count-format "(%d/%d) ")
#+end_src
*** Keymaps
#+begin_src emacs-lisp :results silent
(define-key ivy-minibuffer-map (kbd "C-j") 'ivy-next-line)
(define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line)
#+end_src

** Projectile
Package installation
#+begin_src emacs-lisp :results silent
(package-unless-install 'projectile)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "M-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "M-p a") 'projectile-add-known-project)
#+end_src

Ivy for projectile:
#+begin_src emacs-lisp :results silent
(package-unless-install 'counsel-projectile)
(require 'counsel-projectile)
(counsel-projectile-mode +1)
#+end_src

Fixing counsel to display keymaps during M-x
Taken from
- https://emacs.stackexchange.com/questions/40787/display-corresponding-key-binding-of-command-during-m-x-completion
- https://emacs.stackexchange.com/questions/38841/counsel-m-x-always-shows
#+begin_src emacs-lisp :results silent
(when (commandp 'counsel-M-x)
    (global-set-key [remap execute-extended-command] 'counsel-M-x))
(setcdr (assoc 'counsel-M-x ivy-initial-inputs-alist) "")
#+end_src
*** Keymaps
#+begin_src projectile
(global-set-key (kbd "C-b") 'projectile-display-buffer)
#+end_src projectile
* Major modes
** Multi-Term
#+begin_src emacs-lisp :results silent
(require 'multi-term)
#+end_src
** PDF-Tools
For viewing PDF files and such! YAY
#+begin_src emacs-lisp :results silent
;(package-unless-install 'pdf-tools)
;(require 'pdf-tools)
;(pdf-tools-install)
#+end_src
*** Stop the blinking
Taken from https://github.com/munen/emacs.d/blob/master/configuration.org
When using evil-mode and pdf-tools and looking at a zoomed PDF, it will blink, because the cursor blinks.
This configuration disables this whilst retaining the blinking cursor in other modes.
#+begin_src emacs-lisp :results silent
(evil-set-initial-state 'pdf-view-mode 'emacs)
(add-hook 'pdf-view-mode-hook
  (lambda ()
    (set (make-local-variable 'evil-emacs-state-cursor) (list nil))))
#+end_src
** ORG
*** General
Adding fold symbols for source code based on
https://mstempl.netlify.com/post/beautify-org-mode/

#+begin_src emacs-lisp :results silent
(setq-default prettify-symbols-alist '(("#+begin_src" . "▶")
                                       ("#+call:" . "▷")
                                       ("#+end_src" . "▴"))) ; ⦖ ◀ ◆ ◉
(setq prettify-symbols-unprettify-at-point 'right-edge)
(add-hook 'org-mode-hook 'prettify-symbols-mode)
#+end_src
*** Babel
Define languages to use 

#+begin_src emacs-lisp :results silent
(require 'ob)
(require 'ob-tangle)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (emacs-lisp . t)
   (python . t)
   (org . t)
   (lilypond . t)
   (latex . t)
   (js . t)
   (java . t)
   (C . t)))

(add-to-list 'org-src-lang-modes (quote ("dot". graphviz-dot)))
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
(add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))
#+end_src

*** Code blocks
The following displays the contents of code blocks in Org-mode files using
the major-mode of the code. It also changes the behavior of TAB to as if it
were used in the appropriate major mode.

#+begin_src emacs-lisp :results silent
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation 1)
#+end_src
*** HTML Preview
#+begin_src emacs-lisp :results silent
(package-unless-install 'org-preview-html)
(package-unless-install 'htmlize)
(require 'org-preview-html)
(require 'htmlize)
#+end_src
*** PDF Preview
#+begin_src emacs-lisp :results silent
(package-unless-install 'latex-preview-pane)
#+end_src
*** Useful to remember
To preview latex fragment as image embedded in text
#+begin_example
org-toggle-latex-fragment
#+end_example

** Markdown
#+begin_src emacs-lisp :results silent
(package-unless-install 'markdown-mode)
(require 'markdown-mode)
#+end_src

