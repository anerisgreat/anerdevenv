#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

alias ls='ls --color=auto'
PS1='[\u@\h \W]\$ '

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

#This section deals with the prompt and checking for color

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

shopt -s checkwinsize

# ANSI color codes
#"\[\[\033[00m\]"    # reset
#"\[\[\033[1m\]"    # hicolor
#"\[\[\033[4m\]"    # underline
#"\[\[\033[7m\]"   # inverse background and foreground
#"\[\[\033[30m\]" # foreground black
#"\[\[\033[31m\]" # foreground red
#"\[\[\033[32m\]" # foreground green
#"\[\[\033[33m\]" # foreground yellow
#"\[\[\033[34m\]" # foreground blue
#"\[\[\033[35m\]" # foreground magenta
#"\[\[\033[36m\]" # foreground cyan
#"\[\[\033[37m\]" # foreground white
#"\[\[\033[40m\]" # background black
#"\[\[\033[41m\]" # background red
#"\[\[\033[42m\]" # background green
#"\[\[\033[43m\]" # background yellow
#"\[\[\033[44m\]" # background blue
#"\[\[\033[45m\]" # background magenta
#"\[\[\033[46m\]" # background cyan
#"\[\[\033[47m\]" # background white
PS1_start="\[\033[0m\](\[\033[0;34m\]\u\[\033[0m\]@\h\[\033[0m\]) "\
"\[\033[0;35m\]\w\[\033[0m\]"
PS1_end="\r\n\[\033[1;31m\]\$\[\033[0m\] "

PS1_command=$PS1_start$PS1_end
#DOESN'T WORK
PS1_command_stripped=$(sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" <<<"$PS1_command")

if [ "$color_prompt" = yes ]; then
    PS1=$PS1_command
else
    PS1=$PS1_command_stripped
fi

#GIT prompt
if [ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]; then

    #Configs (optional)
    # GIT_PROMPT_FETCH_REMOTE_STATUS=0
        # uncomment to avoid fetching remote status
    # GIT_PROMPT_IGNORE_SUBMODULES=1 
        # uncomment to avoid searching for changed files in submodules
    # GIT_PROMPT_WITH_VIRTUAL_ENV=0
        # uncomment to avoid setting virtual 
        # environment infos for node/python/conda environments

    # GIT_PROMPT_SHOW_UPSTREAM=1 # uncomment to show upstream tracking branch
    # GIT_PROMPT_SHOW_UNTRACKED_FILES=normal
        # can be no, normal or all; determines counting of untracked files

    # GIT_PROMPT_SHOW_CHANGED_FILES_COUNT=0 
        # uncomment to avoid printing the number of changed files

    # GIT_PROMPT_STATUS_COMMAND=gitstatus_pre-1.7.10.sh
        # uncomment to support Git older than 1.7.10

    GIT_PROMPT_START=$PS1_start    # uncomment for custom prompt start sequence
    GIT_PROMPT_END=$PS1_end      # uncomment for custom prompt end sequence

    # as last entry source the gitprompt script
    # GIT_PROMPT_THEME=Custom
        # use custom theme specified 
        # in file GIT_PROMPT_THEME_FILE (default ~/.git-prompt-colors.sh)
    # GIT_PROMPT_THEME_FILE=~/.git-prompt-colors.sh
    # GIT_PROMPT_THEME=Solarized # use theme optimized for
        # solarized color scheme
    GIT_PROMPT_ONLY_IN_REPO=1
    source $HOME/.bash-git-prompt/gitprompt.sh
fi

unset color_prompt force_color_prompt

#Aliases

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && \
        eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

#NEEDS FIX
#alias ls='lsd'
#alias ll='lsd -alF'
#alias la='lsd -A'
#alias l='lsd -CF'

set -o vi

